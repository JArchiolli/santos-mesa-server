name: Build and deploy Node.js app to Azure Web App - sts-mesa-server

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20.x' # Alterado para LTS (recomendado para NestJS)
  PRISMA_VERSION: '6.5.0'
  AZURE_RUNTIME_STACK: 'NODE|20-lts' # Atualizado para corresponder à versão do Node

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Clean install dependencies
        run: |
          npm ci
          # Remover @nestjs/cli das dependências regulares se existir
          npm uninstall @nestjs/cli

      - name: Install Prisma CLI
        run: npm install -g prisma@${{ env.PRISMA_VERSION }}

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: |
          npm run build
          # Garantir que a estrutura dist/ está completa
          ls -la dist/

      - name: Run tests
        run: npm test

      - name: Prepare deployment package
        run: |
          mkdir -p deployment
          # Copiar apenas o necessário para produção
          cp -r dist node_modules package.json package-lock.json prisma deployment/
          # Garantir que .env.production seja incluído
          if [ -f .env.production ]; then
            cp .env.production deployment/.env
            echo "Arquivo .env.production incluído no deploy"
          else
            echo "AVISO: .env.production não encontrado"
          fi
          # Criar arquivo de startup personalizado
          echo "#!/bin/bash" > deployment/startup.sh
          echo "npm run start:prod" >> deployment/startup.sh
          chmod +x deployment/startup.sh
          # Compactar para deploy
          cd deployment && zip -r ../release.zip ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact
        run: unzip release.zip -d deployment

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DE6A0EA8FEA147F5B676E6346C341933 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_32371F979C95479F92B171C9BDA8AEE5 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4529181DCB2C4DECA901A16F5A6C3B89 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'sts-mesa-server'
          slot-name: 'Production'
          package: deployment
          runtime-stack: ${{ env.AZURE_RUNTIME_STACK }}
          app-settings: |
            [
              {"name": "WEBSITES_PORT", "value": "8080"},
              {"name": "NODE_ENV", "value": "production"},
              {"name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "false"},
              {"name": "DATABASE_URL", "value": "${{ secrets.DATABASE_URL }}"},
              {"name": "PRISMA_HIDE_UPDATE_MESSAGE", "value": "1"},
              {"name": "STARTUP_COMMAND", "value": "npm run start:prod"},
              {"name": "WEBSITE_NODE_DEFAULT_VERSION", "value": "~20"},
              {"name": "NPM_CONFIG_PRODUCTION", "value": "true"}
            ]